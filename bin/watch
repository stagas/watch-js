#!/usr/bin/env node

/*!
 * watch-js
 */

/**
 * Module dependencies.
 */

var fs = require('fs')
var path = require('path')
var program = require('commander')
var cp = require('child_process')

/**
 * Command line.
 */

var pkg = require(__dirname+'/../package.json')
program
  .version(pkg.version)
  .usage('[options] <file>')
  .option('-i, --interval <s>', 'Run on an interval of seconds.', parseInt)
  .option('-b, --before <cmd>', 'Command to run before monitoring starts.')
  .option('-w, --watch <dir>', 'Watch for changes on dir.')
  .parse(process.argv)

var watching = {}
var starting = false

var cwd = process.cwd()
var dir = program.watch || cwd

var cmd = program.args

if (!cmd[0]) program.help()

start()

function start () {
  if (starting) return
  starting = true

  unwatch()

  if (program.before) {
    var b = program.before.split(' ')
    exec(b[0], b.slice(1), function () {
      var child = spawn(cmd[0], cmd.slice(1), monitor(function () {
        child.kill()
      }))
    })
  }
  else {
    exec(cmd[0], cmd.slice(1), monitor(start))
  }
}

function monitor (fn) {
  return function () {
    starting = false

    if (program.interval) {
      setTimeout(fn, program.interval*1000)
    }
    else {
      watch(dir, fn)
    }
  }
}

function exec (cmd, args, fn) {
  console.log('-> executing :', cmd, args)

  var stdio = [0,1,2]
  var child = cp.execFile(cmd, args, { stdio: stdio }, fn)

  child.stderr.pipe(process.stderr)
  child.stdout.pipe(process.stdout)

  return child
}

function spawn (cmd, args, fn) {
  console.log('-> executing :', cmd, args)

  var child = cp.spawn(cmd, args)

  child.on('exit', start)
  child.stderr.pipe(process.stderr)
  child.stdout.pipe(process.stdout)

  fn()

  return child
}

function watch (dir, fn) {
  var fnTimeout
  if (watching[dir]) {
  console.log(' *** already watching : %s ***', dir)
    return
  }
  console.log('  traversing : %s', dir)
  watching[dir] = readdirtree(dir)
  watching[dir].unshift(dir)
  watching[dir] = watching[dir].map(function (d) {
  console.log('    watching : %s', d)
    return fs.watch(d, function (ev, filename) {
      if (starting) return
      if ('change' == ev && '.' != filename.substr(0,1)) {
        clearTimeout(fnTimeout)
        console.log(' *** changed : %s', path.join(d, filename))
        fnTimeout = setTimeout(fn, program.delay||1500)
      }
    })
  })
}

function unwatch () {
  if (watching[dir]) {
    watching[dir].forEach(function (w) {
      w.close()
    })
    watching[dir] = null
  }
}

/**
 * Read a dir tree.
 *
 * @param {string} dirname
 * @return {array} dirs
 */

function readdirtree (dirname, arr) {
  arr = arr || []

  fs.readdirSync(dirname)
    .filter(function (file) { return '.' != file.substr(0,1) })
    .map(function (file) { return path.join(dirname, file) })
    .forEach(function (file) {
      if (fs.statSync(file).isDirectory()) {
        arr.push(file)
        readdirtree(file, arr)
      }
    })

  return arr
}
